output$thinkMessage <- renderText("Réfléchissez encore 30 secondes!")
Sys.sleep(6)  # Attendre 6 secondes
output$thinkMessage <- renderText("")  # Effacer le message
})
}
shinyApp(ui, server)
detect_consecutive_violations <- function(grid) {
rows_to_highlight <- list()  # Pour stocker les indices des lignes avec erreurs
cols_to_highlight <- list()  # Pour stocker les indices des colonnes avec erreurs
# Vérification des lignes
for (i in 1:nrow(grid)) {
count_0 <- 0
count_1 <- 0
for (j in 1:ncol(grid)) {
if (!is.na(grid[i, j])) {  # On ne considère que les valeurs non manquantes
if (grid[i, j] == 0) {
count_0 <- count_0 + 1
count_1 <- 0
} else if (grid[i, j] == 1) {
count_1 <- count_1 + 1
count_0 <- 0
}
# Si on atteint exactement 3 consécutifs, on enregistre l'indice
if (count_0 == 3) {
rows_to_highlight[[i]] <- unique(c(rows_to_highlight[[i]], j))
}
if (count_1 == 3) {
rows_to_highlight[[i]] <- unique(c(rows_to_highlight[[i]], j))
}
} else {
count_0 <- 0
count_1 <- 0
}
}
}
# Vérification des colonnes
for (j in 1:ncol(grid)) {
count_0 <- 0
count_1 <- 0
for (i in 1:nrow(grid)) {
if (!is.na(grid[i, j])) {
if (grid[i, j] == 0) {
count_0 <- count_0 + 1
count_1 <- 0
} else if (grid[i, j] == 1) {
count_1 <- count_1 + 1
count_0 <- 0
}
# Si on atteint exactement 3 consécutifs, on enregistre l'indice
if (count_0 == 3) {
cols_to_highlight[[j]] <- unique(c(cols_to_highlight[[j]], i))
}
if (count_1 == 3) {
cols_to_highlight[[j]] <- unique(c(cols_to_highlight[[j]], i))
}
} else {
count_0 <- 0
count_1 <- 0
}
}
}
return(list(rows = rows_to_highlight, cols = cols_to_highlight))
}
ui <- fluidPage(
theme = shinytheme("superhero"),
tags$head(
tags$style(HTML("
/* Conteneur principal centre pour grille + boutons */
.grid-and-buttons {
display: flex;
flex-direction: column;
align-items: center;
justify-content: center;
margin-top: 20px;
}
/* Capsule rouge autour de la grille */
.red-capsule {
border: 5px solid red;
background-color: #FFCDD2;  /* Rouge clair */
padding: 20px;
display: inline-block;
border-radius: 20px;  /* Coins arrondis */
box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.3);
margin-bottom: 10px;
}
/* Capsule externe autour de la grille et des boutons */
.outer-capsule-container {
border: 5px solid #FFD700;  /* Jaune */
background-color: #F5F5DC;
padding: 30px;
display: inline-block;
border-radius: 30px;
box-shadow: 0px 12px 20px rgba(0, 0, 0, 0.3);
margin-bottom: 20px;
}
/* Conteneur de la grille */
.grid-container {
margin-bottom: 20px;
}
/* Conteneur des boutons */
.button-container {
display: flex;
justify-content: center;
gap: 15px;
padding: 10px;
background-color: #546E7A;
border-radius: 10px;
box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.15);
}
/* Style des boutons Takuzu */
.takuzu-btn {
background-color: #37474F;
border-radius: 50%;
border: 1px solid white;
width: 50px;
height: 50px;
color: white;
font-size: 20px;
text-align: center;
box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
transition: all 0.2s ease-in-out;
}
.takuzu-btn-1 { background-color: #FFA500; }  /* Orange pour 1 */
.takuzu-btn-0 { background-color: #4CAF50; }  /* Vert pour 0 */
.takuzu-btn-violated { background-color: #FF0000; }  /* Rouge pour les violations */
.takuzu-btn:hover {
background-color: #FFA000;
box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.2);
transform: translateY(-3px);
}
/* Boutons d'action */
.new-grid-btn, .check-grid-btn, .hint-btn {
background-color: #0288D1;
border-color: #01579B;
color: white;
font-size: 16px;
padding: 10px 20px;
border-radius: 10px;
box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
transition: all 0.2s ease-in-out;
}
.new-grid-btn:hover { background-color: #01579B; transform: translateY(-3px); }
.check-grid-btn:hover { background-color: #C62828; transform: translateY(-3px); }
.hint-btn:hover { background-color: #FFD700; transform: translateY(-3px); color: black; }
/* Animation du message de statut clignotant */
.status-message {
font-weight: bold;
font-size: 18px;
text-align: center;
color: white;
animation: pulse 1.5s infinite;
}
@keyframes pulse {
0% { color: white; }
50% { color: #FFD700; }
100% { color: white; }
}
/* Message de Reflechissez encore 30 secondes */
.think-message {
color: red;
font-size: 24px;
font-weight: bold;
text-align: center;
margin-bottom: 20px;
}
/* Style des emojis dans la capsule a fond blanc */
.emoji-container {
font-size: 30px;
text-align: center;
margin-bottom: 20px;
}
"))
),
titlePanel("Jeu Takuzu"),
tabsetPanel(
tabPanel("Jeu",
sidebarLayout(
sidebarPanel(
sliderInput("gridSize", "Taille de la grille :",
min = 8, max = 10, value = 8, step = 2,
animate = TRUE),
selectInput("difficulty", "Choisir la difficulte :",
choices = c("Facile" = "facile",
"Avancee" = "avancee",
"Difficile" = "difficile"),
selected = "facile"),
verbatimTextOutput("status")
),
mainPanel(
div(class = "outer-capsule-container",  # Capsule externe autour de grille et boutons
div(class = "grid-and-buttons",
div(class = "think-message", textOutput("thinkMessage")),
# Capsule a fond blanc contenant les emojis
div(class = "emoji-container", "\U1F60A \U1F600 \U1F917 \U1F601"),  # emojis jaunes
div(class = "red-capsule",
div(class = "grid-container", uiOutput("gridUI"))
),
div(class = "button-container",
actionButton("reset", "Nouvelle Grille", class = "new-grid-btn"),
actionButton("check", "Verifier la Grille", class = "check-grid-btn"),
actionButton("hint", "Obtenir un Indice", class = "hint-btn"),
actionButton("result", "Resultat", class = "new-grid-btn")
)
)
)
)
)
),
tabPanel("Regles du Jeu",
h3("Regles du Jeu Takuzu"),
p("Le but du jeu Takuzu est de remplir la grille avec des 0 et des 1 de maniere a respecter les regles suivantes :"),
tags$ul(
tags$li("Chaque ligne et chaque colonne doit contenir un nombre egal de 0 et de 1."),
tags$li("Aucune ligne ni colonne ne peut contenir plus de deux 0 ou plus de deux 1 consecutifs."),
tags$li("La grille ne doit pas contenir deux lignes ou deux colonnes identiques.")
),
br(),  # Ajoute un espace avant le lien
tags$p("Pour plus d'informations, consultez ",
tags$a(href = "https://fr.wikipedia.org/wiki/Takuzu",
"la page Wikipedia du Takuzu",
target = "_blank"))  # Ouvre le lien dans un nouvel onglet
)
)
)
server <- function(input, output, session) {
size <- reactive({ input$gridSize })
takuzu_grid <- reactiveVal()
start_time <- reactiveVal(NULL)
matrice_base <- reactiveVal()
resultat_affiche <- reactiveVal(FALSE)
# Initialisation de la grille
observe({
base_grid <- generate_valid_matrix(input$gridSize)
matrice_base(base_grid)
takuzu_grid(creer_matrice_takuzu(base_grid, difficulte = input$difficulty))
start_time(Sys.time())
resultat_affiche(FALSE)
})
# Affichage de la grille
output$gridUI <- renderUI({
grid <- takuzu_grid()
current_size <- size()
buttons <- lapply(1:current_size, function(i) {
fluidRow(
lapply(1:current_size, function(j) {
actionButton(paste0("btn_", i, "_", j),
label = ifelse(is.na(grid[i, j]), "", grid[i, j]),
class = paste("takuzu-btn",
ifelse(grid[i, j] == 1, "takuzu-btn-1",
ifelse(grid[i, j] == 0, "takuzu-btn-0", ""))))
})
)
})
do.call(tagList, buttons)
})
# Interaction avec les boutons
observe({
current_size <- size()
for (i in 1:current_size) {
for (j in 1:current_size) {
local({
ii <- i; jj <- j
btn_id <- paste0("btn_", ii, "_", jj)
observeEvent(input[[btn_id]], {
if (!resultat_affiche()) {
grid <- takuzu_grid()
current_value <- grid[ii, jj]
new_value <- ifelse(is.na(current_value), 0, ifelse(current_value == 0, 1, NA))
grid[ii, jj] <- new_value
takuzu_grid(grid)
updateActionButton(session, btn_id, label = ifelse(is.na(new_value), "", new_value))
# Vérification des violations après chaque modification
violations <- detect_consecutive_violations(grid)
# Colorier en rouge les cases violant les règles
if (ii %in% violations$rows[[ii]] || jj %in% violations$cols[[jj]]) {
updateActionButton(session, btn_id, style = "background-color: red;")
} else {
# Si pas de violation, enlever le style de couleur
updateActionButton(session, btn_id, style = "")
}
}
}, ignoreNULL = FALSE)
})
}
}
})
# Verification de la grille
observeEvent(input$check, {
grid <- takuzu_grid()
valid <- verifier_grille(grid, size())
output$status <- renderText({
if (valid) "\u2705 Grille Valide !" else "\u274C Il y a des erreurs dans la grille."
})
})
# Nouvelle grille
observeEvent(input$reset, {
resultat_affiche(FALSE)  # Permet de réinitialiser après avoir vu le résultat
new_base_grid <- generate_valid_matrix(input$gridSize)
matrice_base(new_base_grid)
takuzu_grid(creer_matrice_takuzu(new_base_grid, difficulte = input$difficulty))
})
# Indices
observeEvent(input$hint, {
if (!resultat_affiche()) {
grid <- takuzu_grid()
base_grid <- matrice_base()
updated_grid <- ajuster_indices_takuzu(base_grid, grid)
takuzu_grid(updated_grid)
for (i in 1:nrow(updated_grid)) {
for (j in 1:ncol(updated_grid)) {
updateActionButton(session, paste0("btn_", i, "_", j), label = ifelse(is.na(updated_grid[i, j]), "", updated_grid[i, j]))
}
}
# Afficher le message d'indication et le faire disparaitre après 6 secondes
output$hintMessage <- renderText("Voici un indice!")
Sys.sleep(6)  # Attendre 6 secondes
output$hintMessage <- renderText("")  # Effacer le message
}
})
# Afficher le resultat une fois le bouton appuyé
observeEvent(input$result, {
if (is.null(start_time()) || difftime(Sys.time(), start_time(), units = "mins") >= 0) {
resultat_affiche(TRUE)
output$status <- renderText({ "\u23F1  Voici la solution:" })
grid_solution <- matrice_base()
takuzu_grid(grid_solution)  # Affiche la solution
}
# Afficher le message de réflexion et le faire disparaitre après 6 secondes
output$thinkMessage <- renderText("Réfléchissez encore 30 secondes!")
Sys.sleep(6)  # Attendre 6 secondes
output$thinkMessage <- renderText("")  # Effacer le message
})
}
shinyApp(ui, server)
devtools::document()
rsconnect::deployApp()
devtools::document()
shiny::runApp(app.R)
shiny::runApp("app.R")
rsconnect::deployApp()
shiny::runApp("app.R")
usethis::use_testthat()
library(testthat)
test_that("generate_valid_row fonctionne comme attendu", {
# Test de la taille générée
taille <- 8
ligne <- generate_valid_row(taille)
expect_equal(length(ligne), taille)
# Test de l'équilibre des 0 et 1 pour une taille paire
expect_equal(sum(ligne), taille / 2, tolerance = 1)
# Test de l'absence de triplets consécutifs identiques
for (i in 3:taille) {
expect_false(ligne[i] == ligne[i-1] && ligne[i] == ligne[i-2])
}
})
source("R/generate_valid_row.R")
test_that("generate_valid_row fonctionne comme attendu", {
# Test de la taille générée
taille <- 8
ligne <- generate_valid_row(taille)
expect_equal(length(ligne), taille)
# Test de l'équilibre des 0 et 1 pour une taille paire
expect_equal(sum(ligne), taille / 2, tolerance = 1)
# Test de l'absence de triplets consécutifs identiques
for (i in 3:taille) {
expect_false(ligne[i] == ligne[i-1] && ligne[i] == ligne[i-2])
}
})
testthat::test_dir("tests/testthat")
testthat::test_dir("tests/testthat")
testthat::test_dir("tests/testthat")
testthat::test_dir("tests/testthat")
# Charger les fonctions nécessaires
source("R/rotate_vector.R")  # Charge la fonction rotate_vector
source("R/generate_valid_row.R")  # Charge la fonction generate_valid_row
test_that("rotate_vector fonctionne comme attendu", {
# Test 1 : Rotation simple
x <- c(1, 2, 3, 4, 5)
shift <- 2
result <- rotate_vector(x, shift)
expect_equal(result, c(4, 5, 1, 2, 3))
# Test 2 : Rotation avec une taille de vecteur de 1 (pas de changement)
x <- c(1)
shift <- 1
result <- rotate_vector(x, shift)
expect_equal(result, c(1))  # Pas de changement pour un seul élément
# Test 3 : Rotation par un nombre supérieur à la taille du vecteur
x <- c(1, 2, 3, 4)
shift <- 5
result <- rotate_vector(x, shift)
expect_equal(result, c(4, 1, 2, 3))  # shift == 5, donc shift == 5 %% 4 = 1
# Test 4 : Rotation d'un vecteur avec des éléments différents
x <- c("a", "b", "c", "d")
shift <- 3
result <- rotate_vector(x, shift)
expect_equal(result, c("b", "c", "d", "a"))
# Test 5 : Rotation d'un vecteur avec des valeurs logiques
x <- c(TRUE, FALSE, TRUE)
shift <- 1
result <- rotate_vector(x, shift)
expect_equal(result, c(FALSE, TRUE, TRUE))
})
testthat::test_dir("tests/testthat")
testthat::test_dir("tests/testthat")
source("R/generate_valid_row.R")
source("R/generate_valid_row.R")
test_that("generate_valid_row fonctionne comme attendu", {
# Test de la taille
taille <- 8
ligne <- generate_valid_row(taille)
expect_equal(length(ligne), taille)
# Test de l'équilibre des 0 et 1
expect_equal(sum(ligne), taille / 2, tolerance = 1)
# Test de l'absence de triplets consécutifs identiques
for (i in 3:taille) {
expect_false(ligne[i] == ligne[i-1] && ligne[i] == ligne[i-2])
}
})
test_that("rotate_vector fonctionne comme attendu", {
# Test 1 : Rotation simple
x <- c(1, 2, 3, 4, 5)
shift <- 2
result <- rotate_vector(x, shift)
expect_equal(result, c(4, 5, 1, 2, 3))
# Test 2 : Rotation avec une taille de vecteur de 1 (pas de changement)
x <- c(1)
shift <- 1
result <- rotate_vector(x, shift)
expect_equal(result, c(1))  # Pas de changement pour un seul élément
# Test 3 : Rotation par un nombre supérieur à la taille du vecteur
x <- c(1, 2, 3, 4)
shift <- 5
result <- rotate_vector(x, shift)
expect_equal(result, c(4, 1, 2, 3))  # shift == 5, donc shift == 5 %% 4 = 1
# Test 4 : Rotation d'un vecteur avec des éléments différents
x <- c("a", "b", "c", "d")
shift <- 3
result <- rotate_vector(x, shift)
expect_equal(result, c("b", "c", "d", "a"))
# Test 5 : Rotation d'un vecteur avec des valeurs logiques
x <- c(TRUE, FALSE, TRUE)
shift <- 1
result <- rotate_vector(x, shift)
expect_equal(result, c(FALSE, TRUE, TRUE))
})
#' Effectue une rotation circulaire d'un vecteur
#'
#' Cette fonction effectue une rotation circulaire d'un vecteur en déplaçant ses éléments vers la droite ou la gauche,
#' selon le nombre de positions spécifié par l'argument \code{shift}.
#' Les éléments sont déplacés et réintégrés à l'extrémité opposée de la séquence.
#'
#' @param x Un vecteur de valeurs (par exemple, numériques, logiques, ou de caractères) à faire tourner.
#' @param shift Un entier représentant le nombre de positions à décaler. \code{shift} est toujours positif, et la rotation se fait vers la droite.
#'
#' @return Un vecteur de même type et longueur que \code{x}, avec les éléments tournés.
#'
#' @examples
#' # Effectuer une rotation à droite de 2 positions
#' rotate_vector(c(1, 2, 3, 4, 5), 2)
#'
#' @export
rotate_vector <- function(x, shift) {
# Calcul de la longueur du vecteur
n <- length(x)
# Effectuer la rotation circulaire
return(c(x[(n - shift + 1):n], x[1:(n - shift)]))
}
test_that("rotate_vector fonctionne comme attendu", {
# Test 1 : Rotation simple
x <- c(1, 2, 3, 4, 5)
shift <- 2
result <- rotate_vector(x, shift)
expect_equal(result, c(4, 5, 1, 2, 3))
# Test 2 : Rotation avec une taille de vecteur de 1 (pas de changement)
x <- c(1)
shift <- 1
result <- rotate_vector(x, shift)
expect_equal(result, c(1))  # Pas de changement pour un seul élément
# Test 3 : Rotation par un nombre supérieur à la taille du vecteur
x <- c(1, 2, 3, 4)
shift <- 5
result <- rotate_vector(x, shift)
expect_equal(result, c(4, 1, 2, 3))  # shift == 5, donc shift == 5 %% 4 = 1
# Test 4 : Rotation d'un vecteur avec des éléments différents
x <- c("a", "b", "c", "d")
shift <- 3
result <- rotate_vector(x, shift)
expect_equal(result, c("b", "c", "d", "a"))
# Test 5 : Rotation d'un vecteur avec des valeurs logiques
x <- c(TRUE, FALSE, TRUE)
shift <- 1
result <- rotate_vector(x, shift)
expect_equal(result, c(FALSE, TRUE, TRUE))
})
rotate_vector(c(1, 2, 3, 4, 5),2)
rotate_vector(c(10, 20, 30, 40),3)
rotate_vector(c("a", "b", "c", "d"),3)
test_that("rotate_vector fonctionne comme attendu", {
# Test 1 : Rotation simple
x <- c(1, 2, 3, 4, 5)
shift <- 2
result <- rotate_vector(x, shift)
expect_equal(result, c(4, 5, 1, 2, 3))
# Test 2 : Rotation par un nombre supérieur à la taille du vecteur
x <- c(10, 20, 30, 40)
shift <- 3
result <- rotate_vector(x, shift)
expect_equal(result, c(20, 30, 40, 10))
})
testthat::test_dir("tests/testthat")
testthat::test_dir("tests/testthat")
testthat::test_dir("tests/testthat")
